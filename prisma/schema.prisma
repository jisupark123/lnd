enum LoginFrom {
  in_app
  kakao
  naver
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  email           String        @unique @db.VarChar(50)
  nickname        String        @unique @db.VarChar(50)
  profileImage    String?
  loginFrom       LoginFrom
  levelScore      Float         @default(0) // 레벨 점수 
  createdProblems Problem[]
  attempts        Attempt[]
  refreshToken    RefreshToken?
}

model Problem {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  levelScore  Float // 레벨 점수
  type        String    @db.VarChar(10) // 사활 | 맥
  result      String    @db.VarChar(20) // 문제 결과 (죽이는 문제 | 살리는 문제)
  format      Json // 문제 형식
  createdUser User      @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId      Int
  attempt     Attempt[]

  @@index([userId])
}

model Attempt {
  id          Int      @id @default(autoincrement())
  attemptedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  problem     Problem  @relation(fields: [problemId], references: [id])
  problemId   Int
  solved      Boolean

  @@index([userId])
  @@index([problemId])
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  token  String
}

// model Notification {
//   id       Int     @default(autoincrement())
//   User     User    @relation(fields: [userId], references: [id])
//   userId   Int
//   title 
//   contents String? @db.VarChar(300)

//   @@id([id, userId])
//   @@index([userId])
// }
